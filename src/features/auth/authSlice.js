import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { checkAuth, createUser, loginUser, signout, updateUserAddress } from './authApi';

const initialState = {
  user: null,
  loggedInUserToken:null,
  error:null,
  status: 'idle',
  checkedAuth:false
};


export const createUserAsync = createAsyncThunk(
  'auth/createUsers',
  async (userData) => {
    const response = await createUser(userData);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const loginUserAsync = createAsyncThunk(
  'auth/loginUser',
  async (loginData,{rejectWithValue}) => {
    try {
      
      const response = await loginUser(loginData);
      // The value we return becomes the `fulfilled` action payload
      return response;
      } catch (error) {
      return rejectWithValue(error)
      
    }
  }
);
export const checkAuthAsync = createAsyncThunk(
  'auth/checkAuth',
  async () => {
    try {
      
      const response = await checkAuth();
      // The value we return becomes the `fulfilled` action payload
      return response;
      } catch (error) {
        console.log('error',error)
      
    }
  }
);
export const signoutAsync = createAsyncThunk(
  'auth/signout',
  async () => {
    const response = await signout();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);


export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {

      state.value += 1;
    },
   
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(createUserAsync.pending, (state) => {
      state.status = 'loading';
    })
    .addCase(createUserAsync.fulfilled, (state, action) => {
      state.status = 'idle';
        state.user = action.payload;
      })
      .addCase(loginUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUserToken = action.payload;
      })
      .addCase(loginUserAsync.rejected, (state, action) => {
        state.status = 'idle';
        state.error = action.payload;
      })
      .addCase(signoutAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(signoutAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUserToken = null;
      })
      .addCase(checkAuthAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(checkAuthAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUserToken = action.payload;
        state.checkedAuth = true
      })
      .addCase(checkAuthAsync.rejected, (state, action) => {
        state.status = 'idle';
        state.checkedAuth = true;
      })
      
      
  },
});

export const { increment } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;
export const selectUser = (state) => state.auth.user;
export const selectChecked= (state) => state.auth.checkedAuth;


export default authSlice.reducer;
